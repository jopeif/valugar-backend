generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id           String    @id @db.Uuid
  zipCode      String    @db.VarChar(9) @map("zip_code")
  state        String    @db.VarChar(2)
  city         String    @db.VarChar(100)
  neighborhood String    @db.VarChar(100)
  street       String    @db.VarChar(255)
  reference    String?
  listing      Listing?

  @@map("addresses")
}

model Listing {
  id               String           @id @db.Uuid
  title            String           @db.VarChar(255)
  description      String?
  type             ListingType      @map("type")
  category         PropertyCategory @map("category")
  basePrice        Decimal          @db.Decimal(14, 2) @map("base_price")
  iptu             Decimal?         @db.Decimal(10, 2)
  userId           String           @db.Uuid @map("user_id")
  addressId        String?          @unique @db.Uuid @map("address_id")
  detailsId        String?          @unique @db.Uuid @map("details_id")
  createdAt        DateTime?        @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt        DateTime?        @default(now()) @db.Timestamptz(6) @map("updated_at")
  address          Address?         @relation(fields: [addressId], references: [id], onUpdate: NoAction, map: "fk_listing_address")
  propertyDetails  PropertyDetail?  @relation(fields: [detailsId], references: [id], onUpdate: NoAction, map: "fk_listing_details")
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_listing_user")

  @@map("listings")
}

model PropertyDetail {
  id        String   @id @db.Uuid
  area      Decimal? @db.Decimal(10, 2)
  bedrooms  Int?
  bathrooms Int?
  
  doesntPayWaterBill Boolean @default(false)
  hasGarage Boolean @default(false)
  isPetFriendly Boolean @default(false)
  hasCeramicFlooring Boolean @default(false)
  hasCeilingLining Boolean @default(false)
  hasBackyard Boolean @default(false)
  hasPool Boolean @default(false)
  hasSolarPanel Boolean @default(false)


  listing   Listing?

  @@map("property_details")
}

model RefreshToken {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid @map("user_id")
  token      String   @unique
  expiresAt  DateTime @db.Timestamptz(6) @map("expires_at")
  createdAt  DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_refresh_user")

  @@index([userId], map: "idx_refresh_tokens_user_id")
  @@map("refresh_tokens")
}


model User {
  id        String   @id @db.Uuid
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  isBlocked Boolean  @default(false)
  createdAt DateTime @default(now())
  lastLogin DateTime?
  isMailVerified Boolean  @default(false)
  mailVerificationToken String?
  roleId    String   @db.Uuid @map("role_id")

  role      Role     @relation(fields: [roleId], references: [id], onUpdate: NoAction, map: "fk_user_role")
  listings       Listing[]
  refreshTokens  RefreshToken[]

}

model Role {
  id   String   @id @db.Uuid
  name String   @unique

  users User[]
}

enum ListingType {
  CASA
  APARTAMENTO
  KITNET
  QUARTO
  SITIO
  OUTRO
}

enum ContactMethod {
  EMAIL
  PHONE
  BOTH
}

enum PropertyCategory {
  RESIDENTIAL
  COMMERCIAL
  MIXED_USE
}
